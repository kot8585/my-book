// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  idx    Int     @id @default(autoincrement()) 
  userId String   @map("user_id")
  email String  @unique
  name  String?
  image String?
  //user primary admin
  type String @default("USER")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  posts Post[]
  userBook UserBook[]
  follower Follow[] @relation("Follower")
  followee Follow[] @relation("Followee")
}

model UserBook {
  userIdx Int @map("user_idx")
  isbn String 
  posts Post[]
  title String
  author String
  publisher String
  imageUrl String @map("image_url")
  categoryName String? @map("category_name")
  totalPage Int @map("total_page")
  //toRead reading complete 
  status String
  // ebook, paper, 
  type String
  comment String? @db.VarChar(50)
  startDate DateTime? @map("start_date")
  endDate DateTime? @map("end_date")
  createdAt DateTime @map("created_at") @default(now()) 

  user User @relation(fields: [userIdx], references: [idx])

  @@id([userIdx, isbn])
}


model Post {
  userIdx Int @map("user_idx")
  isbn String
  idx Int @id @default(autoincrement())
  page Int 
  title String? @db.VarChar(255)
  content String?
  type String? 
  createdAt DateTime @map("created_at") @default(now()) 
  updatedAt DateTime? @map("updated_ap")
  openType String  @map("open_type")
  bookmarkUserIdx String? @map("bookmark_user_idx")
  likeUserIdx String?  @map("like_user_idx")

  user User @relation(fields: [userIdx], references: [idx])
  userBook UserBook @relation(fields: [isbn, userIdx], references: [isbn, userIdx])
}

model Comment {
  postIdx Int @map("post_idx")
  userIdx Int @map("user_idx")
  idx Int @id @default(autoincrement())
  content String
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime? @map("updated_at")
}

model Follow {
  idx Int @id @default(autoincrement())
  followerIdx Int @map("follower_idx") 
  followeeIdx Int @map("followee_idx")

  followerUser User @relation("Follower", fields: [followerIdx], references: [idx])
  followeeUser User @relation("Followee", fields: [followeeIdx], references: [idx])
}
